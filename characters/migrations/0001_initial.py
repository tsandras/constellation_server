# Generated by Django 5.0.1 on 2024-01-24 16:54

import characters.models
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Background',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('description', models.TextField(verbose_name='description')),
                ('rank_description', models.TextField(verbose_name='rank_description')),
            ],
        ),
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('description', models.TextField(verbose_name='description')),
                ('is_advanced', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Keystone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('description', models.TextField(verbose_name='description')),
            ],
        ),
        migrations.CreateModel(
            name='Notable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('description', models.TextField(verbose_name='description')),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('description', models.TextField(verbose_name='description')),
                ('category', models.CharField(choices=[('KNOWLEDGE', 'knowledge'), ('SOCIAL', 'social'), ('FIGHT', 'fight'), ('APTITUDE', 'aptitude'), ('TALENT', 'talent')])),
            ],
        ),
        migrations.CreateModel(
            name='Spell',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('description', models.TextField(verbose_name='description')),
                ('category', models.CharField(choices=[('MENTAL', 'mental'), ('HANDLING', 'handling'), ('ALTERATION', 'alteration')])),
            ],
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('description', models.TextField(verbose_name='description')),
                ('position_x', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(0), django.core.validators.MinValueValidator(200)], verbose_name='position_x')),
                ('position_y', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(0), django.core.validators.MinValueValidator(150)], verbose_name='position_y')),
                ('category', models.CharField(choices=[('SKILL_PRO', 'skill_proficiency'), ('SKILL_EXP', 'skill_expertise'), ('SPELL_PRO', 'spell_proficiency'), ('SPELL_EXP', 'spell_expertise'), ('BACKGROUND', 'background'), ('NOTABLE', 'notable'), ('KEYSTONE', 'keystone'), ('ATTRIBUTE', 'attribute')], verbose_name='category')),
                ('skill_expertise', models.CharField(blank=True, choices=[('KNOWLEDGE', 'knowledge'), ('SOCIAL', 'social'), ('FIGHT', 'fight'), ('APTITUDE', 'aptitude'), ('TALENT', 'talent')], null=True, verbose_name='skill_expertise')),
                ('spell_expertise', models.CharField(blank=True, choices=[('MENTAL', 'mental'), ('HANDLING', 'handling'), ('ALTERATION', 'alteration')], null=True, verbose_name='spell_expertise')),
                ('bonus', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(-1)], verbose_name='bonus')),
                ('bonus_range', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('STR', 'Strength'), ('DEX', 'Dexterity'), ('STA', 'Stamina'), ('QUI', 'Quickness'), ('RES', 'Resistance'), ('INT', 'Intelligence'), ('CHA', 'Charisma'), ('WIL', 'Will'), ('POW', 'Power')]), default=list, size=9)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='nodes', to='characters.board', verbose_name='board')),
                ('keystone', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='characters.keystone', verbose_name='keystone')),
                ('notable', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='characters.notable', verbose_name='notable')),
                ('skill', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='characters.skill', verbose_name='skill')),
                ('spell', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='characters.spell', verbose_name='spell')),
            ],
        ),
        migrations.CreateModel(
            name='Speciality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('skill', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='specialities', to='characters.skill', verbose_name='skill')),
            ],
        ),
        migrations.CreateModel(
            name='Improvement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('description', models.TextField(verbose_name='description')),
                ('spell', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='improvements', to='characters.spell', verbose_name='spell')),
            ],
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('note', models.TextField(blank=True, null=True, verbose_name='note')),
                ('attributes', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(validators=[django.core.validators.MaxValueValidator(0), django.core.validators.MinValueValidator(9)]), default=characters.models.default_character_attributes, size=9)),
                ('boards', models.ManyToManyField(to='characters.board', verbose_name='notable')),
                ('improvements', models.ManyToManyField(to='characters.improvement', verbose_name='improvements')),
                ('nodes', models.ManyToManyField(to='characters.node', verbose_name='notable')),
                ('skill_expertises', models.ManyToManyField(to='characters.skill', verbose_name='skill_expertises')),
                ('specialities', models.ManyToManyField(to='characters.speciality', verbose_name='specialities')),
                ('spell_expertises', models.ManyToManyField(to='characters.spell', verbose_name='spell_expertises')),
            ],
        ),
    ]
